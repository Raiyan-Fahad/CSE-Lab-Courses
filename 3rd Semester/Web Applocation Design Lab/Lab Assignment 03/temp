This project does a fun "Do You Love Me?" button effect using CSS transitions, transforms, and animations.
The "Yes" button stays in place and gives us a reply, but the "No" button moves away when hovered, making it hard to click.
Here is a little breakdown/explanation of the work


1. untouchable.html

  •	<body>: Contains the visible content on the page: 
    o	<h2>Do you love me?</h2>: A heading asking the user "Do you love me?".
    o	<div class="container">: A container div holding the button and box.
    o	<p id="love"></p>: A paragraph element where the reply will appear after clicking yes (initially empty).
  •	<script src="move.js"></script>: Links the external JavaScript file (move.js), which adds functionality to the buttons.


2. style.css

  •	body: The body is styled with flex to center its content both horizontally and vertically (align-items: center; justify-content: center). It also styles itself with color and fonts
  •	h2: The <h2> tag (the question) has a margin below it to give space between the heading and the buttons.
  •	.container: This container holds both buttons. It's set to have relative positioning for layout control.
  •	.btn: This class is used for both buttons. It gives:
    o	Padding, font size, and a green background color.
    o	A transition for smooth hover effects.
    o	Rounded corners with border-radius: 8px.
  •	.btn:hover: The button changes to a darker green (#218838) when hovered.
  •	.no-box: This class styles the "No" box:
    o	It’s a rectangular box with red background (#dc3545), white text, and centered content.
    o	The box is given smooth movement with transition: transform 0.1s ease-in-out to move it up when hovered (“ease-in and ease-out” gives the animation a smooth and natural look, making it feel more fluid.).
  •	.move-up: This class moves the "No" box up by 170px when applied.
  •	#love: This styles the paragraph for the reply:
    o	Initially, its opacity is 0 (invisible) and then smoothly fades in (opacity: 1) when displayed.


3. move.js

  •	“document.addEventListener("DOMContentLoaded", () => {...});” This ensures the code inside runs only after the HTML content is fully loaded.
  •	“const noBox = document.getElementById("noBox");” Selects the "No" box by its ID and stores it in the noBox variable.
  •	“const yesBtn = document.getElementById("yesBtn");” Selects the "Yes" button by its ID and stores it in the yesBtn variable.
  •	“const love = document.getElementById("love");” Selects the paragraph (<p>) that will display the love message.
  •	“noBox.addEventListener("mouseenter", () => {...});” When the user hovers over the "No" box, it toggles the move-up class. This causes the "No" box to either move up or down, depending on whether the class is already applied.
  •	“yesBtn.addEventListener("click", () => {...});” When the "Yes" button is clicked, the text inside the loveMessage element changes to "I love you too ❤" and its opacity is set to 1, making it fade in.



Now let’s sum up:

  •	HTML defines the structure of the page.
  •	CSS styles the page, defines how elements behave on hover, and controls animations.
  •	JavaScript adds interactivity to the "No" box (toggle up/down movement) and the "Yes" button (displays the love message).
